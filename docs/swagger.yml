basePath: /
consumes:
- application/json
definitions:
  HTTPError:
    properties:
      code:
        description: HTTP status code
        format: int64
        type: integer
        x-go-name: Code
      error:
        description: HTTP error body
        type: object
        x-go-name: Error
    required:
    - code
    - error
    title: HTTPError represents HTTP error data.
    type: object
    x-go-package: github.com/dupman/server/dto
  HTTPResponse:
    properties:
      code:
        description: HTTP status code
        format: int64
        type: integer
        x-go-name: Code
      data:
        description: HTTP response body
        type: object
        x-go-name: Data
    required:
    - code
    - data
    title: HTTPResponse represents HTTP response data.
    type: object
    x-go-package: github.com/dupman/server/dto
  OAuthError:
    properties:
      error:
        description: OAuth error code
        example: invalid_request
        type: string
        x-go-name: Error
      error_description:
        description: OAuth error description
        type: string
        x-go-name: ErrorDescription
      error_uri:
        description: OAuth error URI
        type: string
        x-go-name: ErrorURI
    required:
    - error
    title: OAuthError represents oauth error.
    type: object
    x-go-package: github.com/dupman/server/dto
  OAuthResponse:
    properties:
      access_token:
        description: JWT Access Token
        example: eyJhbGciOiJSUz...dAlCslnO3YqiCA
        type: string
        x-go-name: AccessToken
      expires_in:
        description: JWT Token Expires In
        example: 3600
        format: int64
        type: integer
        x-go-name: ExpiresIn
      token_type:
        description: JWT Token Type
        example: Bearer
        type: string
        x-go-name: TokenType
    required:
    - access_token
    - token_type
    - expires_in
    title: OAuthResponse represents JWT token data.
    type: object
    x-go-package: github.com/dupman/server/dto
  UUID:
    description: |-
      A UUID is a 128 bit (16 byte) Universal Unique IDentifier as defined in RFC
      4122.
    items:
      format: uint8
      type: integer
    type: array
    x-go-package: github.com/google/uuid
  UserAccount:
    properties:
      createdAt:
        description: User creation date and time
        format: date-time
        type: string
        x-go-name: CreatedAt
      email:
        description: User Email
        example: j_doe@dup.man
        type: string
        x-go-name: Email
      firstName:
        description: User First Name
        example: John
        type: string
        x-go-name: FirstName
      id:
        description: User ID
        format: uuid
        type: string
        x-go-name: ID
      lastName:
        description: User Last Name
        example: Doe
        type: string
        x-go-name: LastName
      updatedAt:
        description: User update date and time
        format: date-time
        type: string
        x-go-name: UpdatedAt
      username:
        description: Username
        example: j_doe
        type: string
        x-go-name: Username
    required:
    - id
    - createdAt
    - updatedAt
    - username
    - firstName
    - lastName
    - email
    title: UserAccount represents user accounts data.
    type: object
    x-go-package: github.com/dupman/server/dto
  UserRegister:
    properties:
      email:
        description: User Email
        example: j_doe@dup.man
        type: string
        x-go-name: Email
      firstName:
        description: User First Name
        example: John
        type: string
        x-go-name: FirstName
      lastName:
        description: User Last Name
        example: Doe
        type: string
        x-go-name: LastName
      password:
        description: User password
        example: pa$$w0rd
        minimum: 8
        type: string
        x-go-name: Password
      username:
        description: Username
        example: j_doe@dup.man
        type: string
        x-go-name: Username
    required:
    - username
    - firstName
    - lastName
    - email
    - password
    title: UserRegister represents registration login payload.
    type: object
    x-go-package: github.com/dupman/server/dto
  WebsiteOnCreate:
    properties:
      token:
        description: Website security Token
        example: h^djncU878*jKCN&87I#DK
        type: string
        x-go-name: Token
      url:
        description: Website URL
        example: https://eample.com
        type: string
        x-go-name: URL
    required:
    - url
    - token
    title: WebsiteOnCreate represents website creation payload.
    type: object
    x-go-package: github.com/dupman/server/dto
  WebsiteOnResponse:
    properties:
      createdAt:
        description: Website creation date and time
        format: date-time
        type: string
        x-go-name: CreatedAt
      id:
        description: Website ID
        format: uuid
        type: string
        x-go-name: ID
      updatedAt:
        description: Website update date and time
        format: date-time
        type: string
        x-go-name: UpdatedAt
      url:
        description: Website URL
        example: https://eample.com
        type: string
        x-go-name: URL
    required:
    - id
    - createdAt
    - updatedAt
    - url
    title: WebsiteOnResponse represents website response payload.
    type: object
    x-go-package: github.com/dupman/server/dto
  WebsitesOnResponse:
    items:
      $ref: '#/definitions/WebsiteOnResponse'
    title: WebsitesOnResponse represents multiple WebsiteOnResponse-s.
    type: array
    x-go-package: github.com/dupman/server/dto
host: localhost:8080
info:
  contact:
    email: info@dupman.cloud
    name: dupman
    url: https://github.com/dupman
  description: This is the documentation of the dupman server REST API.
  license:
    name: Apache-2.0
    url: https://github.com/dupman/server/blob/main/LICENSE
  title: dupman server REST API.
  version: 0.0.0
paths:
  /account:
    get:
      operationId: currentUser
      responses:
        "200":
          description: Ok
          schema:
            $ref: '#/definitions/UserAccount'
        "401":
          description: Access Denied
          schema:
            $ref: '#/definitions/HTTPError'
      security:
      - OAuth2PasswordBearer: []
      summary: Get current authenticated user.
      tags:
      - Account
  /auth/register:
    post:
      operationId: register
      parameters:
      - description: register payload
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/UserRegister'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/UserAccount'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/HTTPError'
      summary: Register new user.
      tags:
      - Auth
  /auth/token:
    post:
      consumes:
      - application/x-www-form-urlencoded
      operationId: token
      parameters:
      - description: Grant Type
        in: formData
        name: grant_type
        type: string
      - description: Username
        in: formData
        name: username
        required: true
        type: string
      - description: Password
        in: formData
        name: password
        required: true
        type: string
      - description: Scope
        in: formData
        name: scope
        type: string
      - description: Client ID
        in: formData
        name: client_id
        type: string
      - description: Client Secret
        in: formData
        name: client_secret
        type: string
      responses:
        "200":
          description: Ok
          schema:
            $ref: '#/definitions/OAuthResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/OAuthError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/OAuthError'
      summary: Authenticate User.
      tags:
      - Auth
  /website:
    get:
      operationId: getAll
      responses:
        "200":
          description: Ok
          schema:
            $ref: '#/definitions/WebsitesOnResponse'
      security:
      - OAuth2PasswordBearer: []
      summary: Get user websites.
      tags:
      - Website
    post:
      operationId: create
      parameters:
      - description: website payload
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/WebsiteOnCreate'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/WebsiteOnResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/HTTPError'
      security:
      - OAuth2PasswordBearer: []
      summary: Create new website.
      tags:
      - Website
produces:
- application/json
schemes:
- http
- https
securityDefinitions:
  OAuth2PasswordBearer:
    flow: password
    tokenUrl: /auth/token
    type: oauth2
swagger: "2.0"
